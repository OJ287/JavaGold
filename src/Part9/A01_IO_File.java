package Part9;

/**
 * @author liyanpeng
 * @date 2025/5/4
 * @description TODO
 */

/**
 * ✅主要的出入力package
 * +--------------------------+----------------------------------------------------+
 * | Package                  | Description                                        |
 * +==========================+====================================================+
 * | java.io                  | 传统I/O操作，基于流的输入输出，文件、序列化、缓冲操作 |
 * +--------------------------+----------------------------------------------------+
 * | java.nio.file            | 文件系统操作，路径处理、文件访问，目录遍历          |
 * +--------------------------+----------------------------------------------------+
 * | java.nio.file.attribute  | 文件属性操作，文件元数据访问，权限、所有者、时间戳等  |
 * +--------------------------+----------------------------------------------------+
 * | java.nio.channels        | 通道I/O操作，非阻塞I/O、文件锁定，网络套接字通道     |
 * +--------------------------+----------------------------------------------------+
 * <p>
 * <p>
 * ✅对比
 * +--------------------------+------------------+------------------+------------------+
 * | Package                  | 主要操作对象      | 线程安全         | 典型用途         |
 * +==========================+==================+==================+==================+
 * | java.io                  | 流(Stream)        | 部分类安全       | 传统文件读写     |
 * |                          | 文件(File)        |                  | 文本处理         |
 * +--------------------------+------------------+------------------+------------------+
 * | java.nio.file            | 路径(Path)        | 多数类安全       | 现代文件操作     |
 * |                          | 文件系统(Files)   |                  | 目录遍历         |
 * +--------------------------+------------------+------------------+------------------+
 * | java.nio.file.attribute  | 文件属性          | 视实现而定       | 文件元数据管理   |
 * |                          | 属性视图          |                  | 权限控制         |
 * +--------------------------+------------------+------------------+------------------+
 * | java.nio.channels        | 通道(Channel)     | 多数类安全       | 高性能I/O        |
 * |                          | 缓冲区(Buffer)    |                  | 网络编程         |
 * +--------------------------+------------------+------------------+------------------+
 * <p>
 * <p>
 * ✅File 类主要构造方法一览表
 * +--------------------------------+----------------------------------------------------+
 * | 构造方法                       | 说明                                               |
 * +================================+====================================================+
 * | File(String pathname)          | 通过路径字符串创建File对象                          |
 * |                                | 路径可以是相对路径或绝对路径                        |
 * +--------------------------------+----------------------------------------------------+
 * | File(String parent, String child) | 根据父路径字符串和子路径字符串创建File对象       |
 * |                                | parent: 父目录路径                                |
 * |                                | child: 子文件/目录名                              |
 * +--------------------------------+----------------------------------------------------+
 * | File(File parent, String child) | 根据父File对象和子路径字符串创建File对象         |
 * |                                | parent: 父目录File对象                            |
 * |                                | child: 子文件/目录名                              |
 * +--------------------------------+----------------------------------------------------+
 * <p>
 * 使用示例
 * // 示例1：直接路径
 * File file1 = new File("data.txt");
 * <p>
 * // 示例2：父子路径组合
 * File file2 = new File("/home/user", "data.txt");
 * <p>
 * // 示例3：URI方式
 * File file3 = new File(new URI("file:///path/to/file"));
 * <p>
 * 注意事项
 * 路径分隔符建议使用File.separator保证跨平台兼容性
 * 构造方法仅创建对象，不实际创建文件/目录
 * 相对路径基于JVM启动目录
 */
public class A01_IO_File {
    // 自动生成 main 方法
    public static void main(String[] args) {
        // TODO
    }
}