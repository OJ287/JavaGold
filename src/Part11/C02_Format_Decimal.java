package Part11;

/**
 * @author liyanpeng
 * @date 2025/5/10
 * @description TODO
 */

import java.text.DecimalFormat;

/**
 * ✅一、DecimalFormat 是什么？
 * DecimalFormat 是 Java 提供的一个用于格式化数值（整数、小数、货币等）的类，属于 java.text 包。
 * 它可以通过指定Pattern 模板来自定义数值的输出样式，
 * 例如：千位分隔符、小数位数、前缀等。
 * 可以通过new取得对象，构造函数传入格式字符串作为参数
 * <p>
 * 它常用于以下场景：
 * •	显示金钱（¥1,234.56）
 * •	控制小数位（保留两位、补零等）
 * •	添加前缀/后缀（如：+1.00%、￥100.00）
 * <p>
 * ✅二、DecimalFormat 构造常见用法
 * DecimalFormat df = new DecimalFormat("###,###.##");
 * System.out.println(df.format(1234567.89));  // 输出: 1,234,567.89
 * 也可以结合 DecimalFormatSymbols 来设置小数点符号、分隔符、货币符号等。
 * <p>
 * ✅三、DecimalFormat 的 Pattern 文字说明一览表
 * ┌────────────┬───────────────────────────────┬──────────────────────────────────────────────────────────┐
 * │ 符号       │ 含义                          │ 说明与实例                                                │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * │ 0          │ 数值占位符，补零               │ "000.00" → 5.2 → "005.20"                                 │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * │ #          │ 数值占位符，不补零             │ "###.##" → 5.2 → "5.2"，→ 0 → ""                          │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * │ .          │ 小数点                        │ "0.00" → 5 → "5.00"                                       │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * │ -          │ 负号字符（非控制符）          │ 自动添加，无需 pattern；可在负数格式自定义中使用         │
 * │            │                               │ 例："#,##0.00; -#,##0.00" → -1234.5 → "-1,234.50"         │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * │ ,          │ 千位分隔符                    │ "#,###" → 1234567 → "1,234,567"                           │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * │ %          │ 乘以 100 并加上 %              │ "0%" → 0.85 → "85%"                                      │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * │ ¥（\u00A5）│ 日元符号（普通前缀字符）       │ "\u00A5#,##0.00" → 1234.5 → "￥1,234.50"                  │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * 以下不在教科书
 * │ E          │ 科学计数法                    │ "0.##E0" → 12345 → "1.23E4"                               │
 * ├────────────┼───────────────────────────────┼──────────────────────────────────────────────────────────┤
 * │ ;          │ 正负格式分隔符                │ "#,##0.00;(#,##0.00)" → -1234.56 → "(1,234.56)"           │
 * └────────────┴───────────────────────────────┴──────────────────────────────────────────────────────────┘
 * <p>
 * ✅四、Pattern 使用例子
 * ┌──────────────────────┬──────────────────────┬────────────────────────────┐
 * │ Pattern              │ 输入数值             │ 格式化结果                  │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ 0.00                 │ 5                    │ 5.00                        │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ 000.000              │ 5.2                  │ 005.200                     │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ ###.##               │ 0                    │                            │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ #,###                │ 1234567              │ 1,234,567                   │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ 0%                   │ 0.85                 │ 85%                         │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ 0.##E0               │ 12345                │ 1.23E4                      │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ #,##0.00;(#,##0.00)  │ -1234.56             │ (1,234.56)                  │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ #,##0.00; -#,##0.00  │ -1234.56             │ -1,234.56                   │
 * ├──────────────────────┼──────────────────────┼────────────────────────────┤
 * │ \u00A5#,##0.00       │ 1234.56              │ ￥1,234.56                  │
 * └──────────────────────┴──────────────────────┴────────────────────────────┘
 */
public class C02_Format_Decimal {
    // 自动生成 main 方法
    public static void main(String[] args) {
        // TODO
        customFormat("###,###.###", 123456.789);
        customFormat("###.##", 123456.789);// 进行了四舍五入
        customFormat("000000.000", 123.78);
        customFormat("$###,###.###", 12345.67);
        customFormat("\u00a5###,###.###", 12345.67);
    }

    static public void customFormat(String pattern, double value) {
        DecimalFormat myFormatter = new DecimalFormat(pattern);
        String fData = myFormatter.format(value);
        System.out.println(fData);
    }
    /**
     * 123,456.789
     * 123456.79    进行了四舍五入
     * 000123.780
     * $12,345.67
     * ¥12,345.67
     */
}