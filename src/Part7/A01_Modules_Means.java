package Part7;
/**
 * モジュール・システムとは
 * SE9より、モジュール・システムが導入されています。
 * プログラムの最小単位はクラスであり、そのクラスをグループ化する仕組みとしてパッケージが使用されます。
 * モジュールはパッケージの上位に位置づけられ、そのパッケージをさらにグループ化します。
 * 
 * モジュール・システムを導入することで、どのようなメリットがあるのでしょうか。
 * 従来、複数のライブラリを使用する場合は、CLASSPATHにライブラリのJARファイルを指定していました。
 * その際、以下のような問題が発生することがあります。
 * ●CLASSPATH 上に同名のクラスがあった場合、CLASSPATHは先頭から評価するため、想定外のクラスがロードされてしまう
 * ● CLASSPATH 上から不要と思われるJAR を削除したいが、どのクラスが使用しているか判断できない
 * ● ライブラリ内でのみ呼び出したいpublic クラスが、外部からでも呼び出しができてしまう
 * 
 * モジュール・システムはこれらの問題を解決します。
 * 複数のパッケージを1つのモジュールとしてまとめることで、そのモジュールの公開範囲や、
 * モジュール間の依存関係を設定することができます。
 * モジュール・システムの導入による効果をまとめると、以下のとおりです。
 * 
 * 概要　　　　　　　　　説明
 * 信頼性の高い構成　　　モジュールかにより、モジュール間の依存性を明示的に宣言するメカニズムが提供されるため、コンパイル時と実行時の両方で依存性を認識できる
 * 強力なカプセル化　　　モジュール内のパッケージは、そのモジュールで明示的にエクスポートされた場合のみ、他のモジュールからアクセスが可能。
 * 　　　　　　　　　　　パッケージのエクスポート元モジュールの機能が必要であることを明示的に宣言しない限り、エクスポートされたパッケージを
 * 　　　　　　　　　　　他のモジュールから使用することができない。これにより、攻撃者がアクセスできるクラスが少なくなるため、プラットフォームのセキュリティが向上する　
 * 
 */

public class A01_Modules_Means {

	public static void main(String[] args) {
		// TODO 自動生成されたメソッド・スタブ

	}

}
